# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  DeployPlugins:
    name: Deploy Plugins
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: See mounted paths
        run: net use

      - name: Kill Pollinator and WebService
        run: | 
          TASKKILL /F /FI "WINDOWTITLE eq Pollinator*"
          TASKKILL /F /FI "WINDOWTITLE eq C:\tools\miniconda3\envs\py27_x64\python.exe*"

          tasklist /FI "IMAGENAME eq deadlinewebservice.exe" | find /I /N "deadlinewebservice.exe">NUL
          if "%ERRORLEVEL%"=="0" TASKKILL /F /IM deadlinewebservice.exe

      # - name: Deploy plugins
      #   run: |
      #     net use W: \\10.1.1.7\DeadlineFiles /persistent:yes /savecred
      #     C:\tools\miniconda3\envs\py27_x64\python.exe deployment\deploy.py
      #   working-directory: C:\git\deadline-pipeline
      #   shell: cmd
      
      # - name: Deploy plugins
      #   run: |
      #     net use W: \\10.1.1.7\DeadlineFiles /persistent:yes /savecred
      #     C:\tools\miniconda3\envs\py27_x64\python.exe deployment\deploy.py -f deployment\deploy_plugins.json
      #   working-directory: C:\git\deadline-pipeline
      #   shell: cmd

      # - name: Start Pollinator
      #   run: |
      #     start "" start.cmd
      #   working-directory: C:\git\deadline-pipeline\pollinator\command
      #   shell: cmd
 
      - name: Start Pollinator
        run: |
          c:/salt/salt-call cmd.run "Start-Process -FilePath 'C:\Program Files\Thinkbox\Deadline10\bin\deadlinewebservice.exe'" shell=powershell --local -l debug
          c:/salt/salt-call cmd.run "Start-Process -FilePath 'C:\tools\miniconda3\envs\py27_x64\python.exe' '-B core\run.py config\override-release.json'" cwd='C:\git\deadline-pipeline\pollinator' shell=powershell --local -l debug
          c:/salt/salt-call cmd.run "Start-Process -FilePath 'C:\tools\miniconda3\envs\py27_x64\python.exe' '-B core\run_cancellation.py config\override-release.json'" cwd='C:\git\deadline-pipeline\pollinator' shell=powershell --local -l debug
          
        working-directory: C:\git\deadline-pipeline\pollinator\command
        shell: cmd


      # - name: Restart Instance
      #   run: |
      #     shutdown /r
      #   shell: cmd

  # DeployAssets:
  #   name: Deploy Assets 
  #   runs-on: self-hosted, fileshare
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Deploy plugins
  #       run: |
  #         net use W: \\10.1.1.7\DeadlineFiles /persistent:yes /savecred
  #         C:\tools\miniconda3\envs\py27_x64\python.exe deployment\deploy.py -f deployment\deploy_plugins.json
  #       working-directory: C:\git\deadline-pipeline
  #       shell: cmd


  NotifySlack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: DeployPlugins
    steps:
    - uses: actions/checkout@v2
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        CHANNEL: 404
